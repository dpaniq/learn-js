/** 
 * *** XMLHttpRequest ***
 * 
 * XMLHttpRequest это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером.
 * Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы.
 * Это позволяет обновлять только часть веб-страницы не прерывая пользователя.
 * XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.
 * 
 * @atribute            @type                       @describe
 * [onreadystatechange] function                    Callback - функция, которая вызывается всякий раз, когда поле readyState меняет свое значение. 
 * [readystate]         unsigned short            0:	UNSENT	            Клиент создан. Метод open() еще не вызван.
 *                                                1:	OPENED	            Вызван метод open(). В этом состоянии можно добавить заголовки через метод setRequestHeader(); вызов метода send() отправит запрос.
 *                                                2:	HEADERS_RECEIVED	Вызван метод send(), получены заголовки и код ответа (200, 404, 501 и проч).
 *                                                3:	LOADING	            Загрузка; если значение responseType равно "text" или пустой строке, то responseText содержит частичные данные.
 *                                                4:	DONE	            Операция завершена. Все данные получены.
 * [response]           varies                      Тело сущности запроса. Соласно полю responseType, может быть ArrayBuffer, Blob, Document, JavaScript объектом (для "json"), или строкой. Равно null если запрос не завершен или окончен с ошибкой.
 * [responseText]       DOMString                   Ответ на запрос в виде строки или null в случае если запрос не успешен или ответ еще не получен.
 * [responseType]       XMLHttpRequestResponseType	Может использоваться для определения типа ответа.
 * [responseXML] 	    Document	                Ответ является объектом DOM Document, или null в случае если запрос окончился ошибкой, или ответ не получен полностью, или если ответ невозможно распарсить как XML или HTML. Ответ парсится как если бы это был text/xml stream. Когда значение responseType равно "document" и запрос выполнен асинхронно, ответ парсится как text/html stream.
 * [status]             unsigned short	            Статус ответа на запрос. Равен кодам HTTP (200 - успешно, 404 не найдено, 301 - перенесено навсегда).
 * [statusText] 	    DOMString	                Строка статуса ответа. В отличи от поля status, эта строка включает в себя текст - ("200 OK", например).
 * [timeout]	        unsigned long	            Время в миллисекундах, после которого запрос будет отменен. Значение 0 (по умолчанию) значит что таймаута не будет. Никогда.
 * [ontimeout]	        Function	                Функция обратного вызова которая будет вызвана в случае таймаута.
 * [upload]	            XMLHttpRequestUpload	    Загрузка (upload process) может отслеживаться event listener'ом.
 * [withCredentials]	boolean	                    Определяет что cross-site запрос, согласно Access-Control  должен использовать авторизацию (креды для логина и пароля) через куки, или заголовок с авторизационными данными. По умолчанию false.
 *
 * @сonstructor [XMLHttpRequest]
 *
 * @methods
 * [abort()]                    - Отменяет запрос, если он был отправлен.
 * [getAllResponseHeaders()]    - Возвращает все заголовки ответа как строку, или null если ответ не был получен. Для multypart запросов возвращает заголовки текущей части запроса, а не всего канала.
 * [getResponseHeader()]        - Возвращает значение указанного заголовка из полученного ответа, или null в случает если ответ не получен, или такого заголовка в ответе нет. Возвращаемая строка имеет кодировку UTF.
 * [open()]                     - Инициализирует запрос. Этот метод может (и должен) быть вызван из JavaScript кода; если необходимо вызвать запрос из нативного кода, то нужно использовать метод openRequest().
 *                      @addict void open(
 *                          DOMString method,               @method   - HTTP метод отправки сообщения - "GET", "POST", "PUT", "DELETE", и проч. Ignored for non-HTTP(S) URLs.
 *                          DOMString url,                  @url      - URL адрес, на который будет отправлено сообщение.
 *                          optional boolean async,         @async    - Необязательный boolean параметр, по умолчанию равный true. Определяет, будет ли запрос отправлен асинхронно. Если значение равно false, метод send() вернет ответ в общем потоке работы приложения (иначе говоря, приложение зависнет на некоторое время), в противном случае, ответ может быть получен только при помощи определенных event listener'ов. В случае, если используется отправка multipart запроса, то этот атрибут должен быть true, или будет выброшено исключение.    
 *                          optional DOMString user,        @user     - Необязательный параметр, используется для аутентификации пользователя. По умолчанию, пустая строка.
 *                          optional DOMString password     @password - Необязательный параметр, используется для аутентификации пользователя. По умолчанию пустая строка.
 *                          )
 * [overrideMimeType()]         - Переопределяет MIME тип, получаемый от сервера. Это может быть использовано, например, для того чтобы получить и распарсить данные в формате text/xml, даже, если сервер сообщает что это не так. Этот метод должен быть вызван перед вызовом метода send().
 * [send()]                     - Отправляет запрос. Если запрос асинхронный (а по умолчанию это так), этот метод вернет значение сразу после того как метод вызван.
 *                              - Если запрос синхронный, то метод вернет значение только после того, как придет запрос от сервера.
 *                              - void send(ArrayBuffer data, ArrayBufferView data, Blob data, Document data, DOMString data, FormData data);
 * [setRequestHeader()]         - Устанавливает значение заголовка HTTP-запроса. Вы должны вызвать setRequestHeader() после open(), но перед send(). Если данный метод вызывается несколько раз с одним и тем же заголовком, все значения объеденяются в один заголовок запроса.
 * 
 * [Events]
 * Событий на самом деле больше, в современной спецификации они все перечислены в том порядке, в каком генерируются во время запроса:
 *              loadstart – начало запроса.
 *              progress – прибыла часть данных ответа, тело ответа полностью на данный момент можно получить из свойства responseText.
 *              abort – запрос был прерван вызовом xhr.abort().
 *              error – произошла ошибка соединения, например неправильное доменное имя. Событие не генерируется для HTTP-ошибок как, например, 404.
 *              load – запрос успешно завершён.
 *              timeout – запрос был отменён по причине истечения отведённого для него времени (происходит, только если был установлен таймаут).
 *              loadend – срабатывает после load, error, timeout или abort.
 * События error, abort, timeout и load взаимно исключают друг друга – может произойти только одно из них.
 * Наиболее часто используют события завершения загрузки (load), ошибки загрузки (error), или мы можем использовать единый обработчик loadend для всего и смотреть в свойствах объекта запроса xhr детали произошедшего.
 * 
 * 
 * @Example_Minimum */
 
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url)
    xhr.send()
    xhr.addEventListener('some', () => {})
    
 /**
  * 
  * @Example */
 
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url)
    xhr.send()
    xhr.addEventListener('some', () => {})

/**
  * 
  * Нужно обернуть в promise для разрешения его после загрузки
  * 
 */ 
 

 
